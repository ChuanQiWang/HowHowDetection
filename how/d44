剛剛在臉書上與朋友談論到程式語言。C/C++對我們做系統研究是很重要的，不過對於某類開發者來說，則強調利用scripting language來使用現成的工具做應用，求新求快。我們應該不能說這些程式語言有高下，但有些人像是入了某個宗派，一昧說自家的好，別家的不好。說自家的好處，也無可厚非，只不過針對語言的使用情境應該要分辨清楚，而不是以偏概全地說，學某某語言才是王道。我想東西只要有用，都有其重要性，況且程式語言只是個工具，學生要能舉一反三，無論學生先學C、Java還是Python，重點都在於計算思維，如果真的懂了，第二種語言只是一碟小菜。但教者和學者要知道語言與應用的關聯性，各種語言有其最佳的用途。學生如果不會C的話，進我的實驗室或是到業界從事與系統相關的研發工作時就會有問題。當然，這不代表學生不能先學Python再學C，也不代表他不能花時間學 Python或其他，而這個例子，當然不代表所有資訊產業。不過，所謂「由奢返簡難」，由scripting language入門者，在遇到較低階的語言時，比較常有適應不良的情況。而設計應用軟體的，用很多友善的圖形介面工具，如果突然來做系統軟體，也常常適應不良。這是習慣問題，並不是改不了，如果當時學習得法，不是硬記的，問題應該不大。如果是硬背的，那當然就麻煩大了。以下專談系統軟體人才的訓練:剛剛在臉書上與朋友談論到程式語言C/C++對我們做系統研究是很重要的，不過對於某類開發者來說，則強調利用scripting language來使用現成的工具做應用，求新求快。我們應該不能說這些程式語言有高下，但有些人像是入了某個宗派，一昧說自家的好，別家的不好。說自家的好處，也無可厚非，只不過針對語言的使用情境應該要分辨清楚，而不是以偏概全地說，學某某語言才是王道。我想東西只要有用，都有其重要性，況且程式語言只是個工具，學生要能舉一反三，無論學生先學C、Java還是Python，重點都在於計算思維，如果真的懂了，第二種語言只是一碟小菜。但教者和學者要知道語言與應用的關聯性，各種語言有其最佳的用途。學生如果不會C的話，進我的實驗室或是到業界從事與系統相關的研發工作時就會有問題。當然，這不代表學生不能先學Python再學C，也不代表他不能花時間學 Python或其他，而這個例子，當然不代表所有資訊產業。不過，所謂「由奢返簡難」，由scripting language入門者，在遇到較低階的語言時，比較常有適應不良的情況。而設計應用軟體的，用很多友善的圖形介面工具，如果突然來做系統軟體，也常常適應不良。這是習慣問題，並不是改不了，如果當時學習得法，不是硬記的，問題應該不大。如果是硬背的，那當然就麻煩大了。以下專談系統軟體人才的訓練:我們發現大多數學生到了研究所，對於系統軟體所需具備的程式能力還欠缺許多，而過去系統廠大多只希望受過訓練的學生去幫系統寫驅動程式，所以學生們也不願積極學。所以我最近在推動的開源系統軟體，也有一部分的原因，是基於這些問題。然而有太多系統商等著要揀現成人才，卻不願贊助人才培育，只會大喊人才不夠。我人微言輕，平時指導幾位學生，或是跟朋友們分享我認為系統軟體的重要性，而教育的決策，需要更多人一起來影響。例如，廠商若認為系統軟體很重要，不妨多提供一些高級研發的工作機會，或是直接提供資源贊助做系統軟體教學研究的老師。我隨時歡迎關心人才培育的業界朋友來提供意見和資源，當意見是好的，資源也到位的時候，那麼對的事情就可能發生；但如果沒有直接給予資源，可能意見再好也沒有用。培育菁英系統人才是很耗資源的，需要有先進的設備和足夠的經費，我們才能多做些貢獻。
